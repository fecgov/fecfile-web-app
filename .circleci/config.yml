# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  browser-tools: circleci/browser-tools@1.2.3
  node: circleci/node@5.0.0

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:

  test:
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/node:16.14-browsers
    resource_class: large
    steps:
      - checkout

      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install

      # If we need to modify the params for install-packages:
      # https://circleci.com/developer/orbs/orb/circleci/node#commands-install-packages
      - node/install-packages:
          override-ci-command: npm install
          app-dir: ~/project/front-end/


      - run:
          name: run unit tests
          command: node --max_old_space_size=4000 ./node_modules/@angular/cli/bin/ng test --code-coverage --watch=false
          working_directory: ~/project/front-end/

      # Sonar cloud setup and scanning
      - run:
          name: Create sonar-scanner cache directory if it does not exist
          command: mkdir -p /tmp/cache/scanner
      - restore_cache:
          keys:
            - v1-sonarcloud-scanner-4.6.2.2472
      - run:
          name: SonarCloud
          command: |
            set -e
            VERSION=4.6.2.2472
            if [ -z "$SONAR_TOKEN" ]; then
                 echo "You must set SONAR_TOKEN environemnt variable"
                 exit 1
            fi
            SCANNER_DIRECTORY=/tmp/cache/scanner
            export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
            OS="linux"
            echo $SONAR_USER_HOME
            if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS.zip
              unzip -qq -o sonar-scanner-cli-$VERSION-$OS.zip -d $SCANNER_DIRECTORY
            fi

            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/jre/bin/java
            $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
          environment:
            SONARQUBE_SCANNER_PARAMS: '{"sonar.host.url":"https://sonarcloud.io"}'
      - save_cache:
          key: v1-sonarcloud-scanner-4.6.2.2472
          paths: /tmp/cache/scanner


  # The unit-tests in the "test" job above are setup so they don't stop the job - there is an || echo "..." after the
  # execution. Once we have unit tests working, we can remove that "|| echo"  and allow the test job to fail
  # and remove this independent job.  Until then, I am keeping this job here to prevent the possibility of
  # missing failed unit tests.
  backup-unit-test:
    docker:
      - image: cimg/node:16.14-browsers
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      #install-packages documentation: https://circleci.com/developer/orbs/orb/circleci/node#commands-install-packages
      - node/install-packages:
          override-ci-command: npm install
          app-dir: ~/project/front-end/
      - run:
          name: run unit tests
          command: node --max_old_space_size=4000 ./node_modules/@angular/cli/bin/ng test --watch=false
          working_directory: ~/project/front-end/

  e2e-test:
    docker:
      - image: cimg/node:16.14-browsers
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      #install-packages documentation: https://circleci.com/developer/orbs/orb/circleci/node#commands-install-packages
      - node/install-packages:
          override-ci-command: npm install
          app-dir: ~/project/front-end/

      - run:
          name: run e2e tests
          command: node --max_old_space_size=4000 ./node_modules/@angular/cli/bin/ng e2e
          working_directory: ~/project/front-end/

  deploy:
    docker:
      - image: cimg/node:16.14-browsers
    resource_class: large
    steps:
      - checkout
      - run:
          name: install python
          command: |
            sudo apt update
            sudo apt install python3 python3-pip

      - run:
          name: Install cf cli
          command: |
            mkdir -p $HOME/bin
            export PATH=$HOME/bin:$PATH
            curl -L "https://cli.run.pivotal.io/stable?release=linux64-binary&version=7.1.0" | tar xzv -C $HOME/bin

      - run:
          name: run deploy script
          no_output_timeout: 15m
          command: pip install -r requirements.txt && invoke deploy --login

  dependendency-check:
    docker:
      - image: cimg/node:14.18-browsers

    steps:
      - checkout

      - node/install-packages:
          app-dir: ~/project/front-end

      - restore_cache:
          keys:
            - v2-snyk-files

      - run:
          name: Verify Snyk auth token is present
          command: |
            if [ -z ${SNYK_AUTH_TOKEN} ]; then
              echo "";
              echo "You must set the SNYK_AUTH_TOKEN environment variable.";
              echo "Go to https://app.snyk.io/account ";
              echo "";
              exit 15
            fi

      - run:
          name: Download Snyk CLI
          command: |
            ls -l snyk-linux || echo cached snyk binary not found
            ls -l snyk.version || echo cached snyk version not found
            LATEST_SNYK_CLI_VERSION=$(curl https://static.snyk.io/cli/latest/version)
            touch snyk.version
            CACHE_SNYK_CLI_VERSION=$(cat snyk.version)
            echo "Cached version is ${CACHE_SNYK_CLI_VERSION} "
            if [[ ! "${CACHE_SNYK_CLI_VERSION}" == "${LATEST_SNYK_CLI_VERSION}"  ]]; then
              echo "Downloading Snyk CLI version ${LATEST_SNYK_CLI_VERSION}"
              curl -sO https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux
              curl -sO https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux.sha256
              sha256sum -c snyk-linux.sha256
              echo $LATEST_SNYK_CLI_VERSION > snyk.version
            else
              echo "Using cached snyk version ${CACHE_SNYK_CLI_VERSION}"
            fi
            sudo cp snyk-linux /usr/local/bin/snyk
            sudo chmod +x /usr/local/bin/snyk
            snyk config set disableSuggestions=true
            snyk auth $SNYK_AUTH_TOKEN

      - save_cache:
          key: v2-snyk-files
          paths:
            - snyk-linux
            - snyk.version

      - run:
          name: Run snyk test
          command: |
            cd front-end
            snyk test


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test:
    jobs:
      - test
      # - backup-unit-test
      - deploy
#      - e2e-test
      - dependendency-check


