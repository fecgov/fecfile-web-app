# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  browser-tools: circleci/browser-tools@1.4.8
  node: circleci/node@5.2.0
  python: circleci/python@2.1.1

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  lint:
    docker:
      - image: cimg/node:20.4.0-browsers
    resource_class: large
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: npm install
          app-dir: ~/project/front-end/

      - run:
          name: Print the linter version
          command: ./node_modules/.bin/eslint --version
          working_directory: ~/project/front-end/

      - run:
          name: Run linter
          command: ./node_modules/.bin/eslint "src/**/*.ts" --max-warnings=0
          working_directory: ~/project/front-end/
      - run:
          name: "Run Prettier with project configuration"
          command: npm run prettier:check:ci
          working_directory: ~/project/front-end/
  test:
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/node:20.4.0-browsers
    resource_class: large
    steps:
      - checkout

      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install

      # If we need to modify the params for install-packages:
      # https://circleci.com/developer/orbs/orb/circleci/node#commands-install-packages
      - node/install-packages:
          override-ci-command: npm install
          app-dir: ~/project/front-end/

      - run:
          name: run unit tests
          command: node --max_old_space_size=4000 ./node_modules/@angular/cli/bin/ng test --code-coverage --watch=false
          working_directory: ~/project/front-end/

      - store_artifacts:
          path: ~/project/front-end/coverage/front-end/lcov-report/
          destination: coverage-report

      # Sonar cloud setup and scanning
      - run:
          name: Create sonar-scanner cache directory if it does not exist
          command: mkdir -p /tmp/cache/scanner
      - restore_cache:
          keys:
            - v1-sonarcloud-scanner-5.0.1.3006
      - run:
          name: SonarCloud
          command: |
            set -e
            VERSION=5.0.1.3006
            if [ -z "$SONAR_TOKEN" ]; then
                 echo "You must set SONAR_TOKEN environemnt variable"
                 exit 1
            fi
            SCANNER_DIRECTORY=/tmp/cache/scanner
            export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
            OS="linux"
            echo $SONAR_USER_HOME
            if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS.zip
              unzip -qq -o sonar-scanner-cli-$VERSION-$OS.zip -d $SCANNER_DIRECTORY
            fi

            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/jre/bin/java
            $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
          environment:
            SONARQUBE_SCANNER_PARAMS: '{"sonar.host.url":"https://sonarcloud.io"}'
      - save_cache:
          key: v1-sonarcloud-scanner-5.0.1.3006
          paths:
            - /tmp/cache/scanner

  e2e-test:
    docker:
      - image: cimg/node:20.4.0-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
          version: docker26
      - run:
          name: clone fecfile-web-api
          command: |
            rm -rf .git fecfile-web-api
            git clone https://github.com/fecgov/fecfile-web-api.git
          working_directory: ~
      - run:
          name: use redis
          command: |
            export MOCK_OPENFEC=REDIS
            echo $MOCK_OPENFEC
      - run:
          name: start fecfile-web-api
          command: |
            git checkout develop
            docker-compose down
            echo "Docker API Version Override: $DOCKER_API_VERSION"
            DB_DOCKERFILE="Dockerfile-e2e" WORKER_DOCKERFILE="Worker_Dockerfile-e2e" API_DOCKERFILE="Dockerfile-e2e" FECFILE_TEST_DB_NAME="postgres"  DJANGO_SECRET_KEY=${E2E_DJANGO_SECRET_KEY} DATABASE_URL=${E2E_DATABASE_URL} FEC_API=${E2E_FEC_API} FEC_API_KEY=${E2E_FEC_API_KEY} docker-compose up --build -d
            docker container run --network container:fecfile-api \
              docker.io/jwilder/dockerize \
              -wait http://localhost:8080/api/v1/user/login/authenticate \
              -wait-retry-interval 2s \
              -timeout 60s; \
          working_directory: ~/project/fecfile-web-api
      - run:
          name: execute e2e tests
          command: |
            docker container run --name fecfile-web-app-e2e -e CIRCLE_BRANCH=${CIRCLE_BRANCH} -e CYPRESS_EMAIL=${CYPRESS_EMAIL} -e CYPRESS_COMMITTEE_ID=${CYPRESS_COMMITTEE_ID} -e CYPRESS_PASSWORD=${CYPRESS_PASSWORD} -e CYPRESS_FILING_PASSWORD=${CYPRESS_FILING_PASSWORD} --network container:fecfile-api cypress/browsers:node-20.5.0-chrome-114.0.5735.133-1-ff-114.0.2-edge-114.0.1823.51-1 /bin/bash -c '\
              cd ~; \
              git clone https://github.com/fecgov/fecfile-web-app.git; \
              cd fecfile-web-app/front-end; \
              git checkout ${CIRCLE_BRANCH}; \
              npm install; \
              node --max_old_space_size=4000 ./node_modules/@angular/cli/bin/ng e2e --spec "cypress/e2e/**/profile.cy.ts" --headless --watch=false --browser chrome;'\
      - run:
          name: stage test result artifacts
          when: always
          command: |
            rm -rf /tmp/cypress
            mkdir -p /tmp/cypress/results
            mkdir -p /tmp/cypress/videos
            docker cp fecfile-web-app-e2e:/root/fecfile-web-app/front-end/cypress/results/. /tmp/cypress/results
            docker cp fecfile-web-app-e2e:/root/fecfile-web-app/front-end/cypress/videos/. /tmp/cypress/videos
            docker rm fecfile-web-app-e2e
      - store_artifacts:
          path: /tmp/cypress/results
          destination: cypress/results
      - store_artifacts:
          path: /tmp/cypress/videos
          destination: cypress/videos
  deploy-job:
    docker:
      - image: cimg/node:20.4.0-browsers
    resource_class: large
    steps:
      - checkout
      - run:
          name: install python
          command: |
            sudo apt update
            sudo apt install python3 python3-pip

      - run:
          name: Install cf cli
          command: |
            mkdir -p $HOME/bin
            export PATH=$HOME/bin:$PATH
            curl -L "https://cli.run.pivotal.io/stable?release=linux64-binary&version=7.1.0" | tar xzv -C $HOME/bin

      - restore_cache:
          keys:
            - v2-snyk-files

      - run:
          name: Verify Snyk auth token is present
          command: |
            if [ -z ${SNYK_AUTH_TOKEN} ]; then
              echo "";
              echo "You must set the SNYK_AUTH_TOKEN environment variable.";
              echo "Go to https://app.snyk.io/account ";
              echo "";
              exit 15
            fi

      - run:
          name: Download Snyk CLI
          command: |
            ls -l snyk-linux || echo cached snyk binary not found
            ls -l snyk.version || echo cached snyk version not found
            LATEST_SNYK_CLI_VERSION=$(curl https://static.snyk.io/cli/latest/version)
            touch snyk.version
            CACHE_SNYK_CLI_VERSION=$(cat snyk.version)
            echo "Cached version is ${CACHE_SNYK_CLI_VERSION} "
            if [[ ! "${CACHE_SNYK_CLI_VERSION}" == "${LATEST_SNYK_CLI_VERSION}"  ]]; then
              echo "Downloading Snyk CLI version ${LATEST_SNYK_CLI_VERSION}"
              curl -sO https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux
              curl -sO https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux.sha256
              sha256sum -c snyk-linux.sha256
              echo $LATEST_SNYK_CLI_VERSION > snyk.version
            else
              echo "Using cached snyk version ${CACHE_SNYK_CLI_VERSION}"
            fi
            sudo cp snyk-linux /usr/local/bin/snyk
            sudo chmod +x /usr/local/bin/snyk
            snyk config set disableSuggestions=true
            snyk auth $SNYK_AUTH_TOKEN

      - save_cache:
          key: v3-snyk-files
          paths:
            - snyk-linux
            - snyk.version

      - run:
          name: run deploy script
          no_output_timeout: 15m
          command: pip install -r requirements.txt && invoke deploy --login

  dependency-check:
    docker:
      - image: cimg/node:20.4.0-browsers
      - image: cimg/python:3.10-node

    steps:
      - checkout

      # If we need to modify the params for install-packages:
      # https://circleci.com/developer/orbs/orb/circleci/node#commands-install-packages
      - node/install-packages:
          override-ci-command: npm install
          app-dir: ~/project/front-end/

      - restore_cache:
          keys:
            - v3-snyk-files

      - run:
          name: Verify Snyk auth token is present
          command: |
            if [ -z ${SNYK_AUTH_TOKEN} ]; then
              echo "";
              echo "You must set the SNYK_AUTH_TOKEN environment variable.";
              echo "Go to https://app.snyk.io/account ";
              echo "";
              exit 15
            fi

      - run:
          name: Download Snyk CLI
          command: |
            ls -l snyk-linux || echo cached snyk binary not found
            ls -l snyk.version || echo cached snyk version not found
            LATEST_SNYK_CLI_VERSION=$(curl https://static.snyk.io/cli/latest/version)
            touch snyk.version
            CACHE_SNYK_CLI_VERSION=$(cat snyk.version)
            echo "Cached version is ${CACHE_SNYK_CLI_VERSION} "
            if [[ ! "${CACHE_SNYK_CLI_VERSION}" == "${LATEST_SNYK_CLI_VERSION}"  ]]; then
              echo "Downloading Snyk CLI version ${LATEST_SNYK_CLI_VERSION}"
              curl -sO https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux
              curl -sO https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux.sha256
              sha256sum -c snyk-linux.sha256
              echo $LATEST_SNYK_CLI_VERSION > snyk.version
            else
              echo "Using cached snyk version ${CACHE_SNYK_CLI_VERSION}"
            fi
            sudo cp snyk-linux /usr/local/bin/snyk
            sudo chmod +x /usr/local/bin/snyk
            snyk config set disableSuggestions=true
            snyk auth $SNYK_AUTH_TOKEN

      - save_cache:
          key: v2-snyk-files
          paths:
            - snyk-linux
            - snyk.version
      - run:
          name: install python
          command: |
            sudo apt update
            sudo apt install python3 python3-pip
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements.txt
      - run:
          name: Run snyk python test
          command: |
            snyk test
      - run:
          name: Run snyk test
          command: |
            cd front-end
            snyk test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
parameters:
  is-nightly-run:
    type: boolean
    default: false

  is-triggered-e2e-test:
    type: boolean
    default: false

workflows:
  primary:
    when:
      and:
        - not: << pipeline.parameters.is-nightly-run >>
        - not: << pipeline.parameters.is-triggered-e2e-test >>
    jobs:
      # - lint
      # - test
      # - dependency-check
      - e2e-test
          # filters:
          #   branches:
          #     only: /develop|release\/sprint-[\.\d]+|main/
      - deploy-job: # All dependencies must pass before deploying
          name: deploy-with-all-dependent-jobs-required
          requires:
            - lint
            - test
            - dependency-check
            - e2e-test
          filters:
            branches:
              only:
                - develop
      - deploy-job: # Deploy job even when e2e tests fail
          name: deploy-even-if-e2e-job-fails
          requires:
            - lint
            - test
            - dependency-check
          filters:
            branches:
              only: /release\/sprint-[\.\d]+|main/

  nightly-run:
    when: << pipeline.parameters.is-nightly-run >>
    jobs:
      - e2e-test

  # This job is run when an e2e test is triggered with the
  # is-triggered-e2e-test parameter via the fecfile-web-api
  # circleci config file.  It is used to run the e2e tests
  # when the fecfile-web-api is deployed to dev/stage/prod.
  triggered-e2e-test:
    when: << pipeline.parameters.is-triggered-e2e-test >>
    jobs:
      - e2e-test
