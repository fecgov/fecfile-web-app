// @ts-check

import * as _ from 'lodash';
import { getAuthToken } from './commands';

export function randomDate(): Date {
  let outDate: Date = new Date();

  const month: number = _.random(1, 12);
  outDate.setMonth(month);

  outDate.setDate(0); //Setting the date (day of the month) to '0' sets it to the last day of that month.  Easy way to get the length of the month.
  let day: number = _.sample(_.range(1, outDate.getDate() + 1));
  day += 1;
  outDate.setDate(day);

  const currentYear: number = outDate.getFullYear();
  const year: number = _.random(currentYear, currentYear + 3);
  outDate.setFullYear(year);

  return outDate;
}

export function dateToString(dateObj: Date): string {
  const m: string = (dateObj.getMonth() + 1).toString().padStart(2, '0');
  const d: string = dateObj.getDate().toString().padStart(2, '0');
  const y: string = dateObj.getFullYear().toString();

  return `${m}/${d}/${y}`;
}

function fillMissingReportCategory(report: object) {
  //    Report Type Category
  if (report['page_1']['report_type_category'] == '') {
    if (report['page_1']['filing_frequency'] == 'QUARTERLY')
      report['page_1']['report_type_category'] = _.sample(['Non-Election Year', 'Election Year', 'Special']);
    else if (report['page_1']['filing_frequency'] == 'MONTHLY')
      report['page_1']['report_type_category'] = _.sample(['Non-Election Year', 'Election Year']);
  }
  return report;
}

function fillMissingReportCode(report: object) {
  //    Report Code
  if (report['page_1']['report_code'] == '') {
    if (report['page_1']['filing_frequency'] == 'MONTHLY') {
      switch (report['page_1']['report_type_category']) {
        case 'Non-Election Year':
          // prettier-ignore
          report['page_1']['report_code'] = _.sample(['M2','M3','M4','M5','M6','M7','M8','M9','M10','M11','M12','YE','TER',]);
          break;
        case 'Election Year':
          // prettier-ignore
          report['page_1']['report_code'] = _.sample(['M2','M3','M4','M5','M6','M7','M8','M9','M10','12G','30G','YE','TER',]);
          break;
      }
    } else if (report['page_1']['filing_frequency'] == 'QUARTERLY') {
      switch (report['page_1']['report_type_category']) {
        case 'Non-Election Year':
          report['page_1']['report_code'] = _.sample(['Q1', 'MY', 'Q2', 'YE', 'TER']);
          break;
        case 'Election Year':
          report['page_1']['report_code'] = _.sample(['Q1', 'Q2', 'Q3', '12G', '30G', 'YE', 'TER']);
          break;
        case 'Special':
          report['page_1']['report_code'] = _.sample(['12P', '12R', '12C', '12S', '30R', '30S']);
          break;
      }
    }
  }
  return report;
}

function fillMissingElectionData(report: object) {
  //Date of Election
  if (report['page_1']['date_of_election'] == '') {
    const ElectionDate: Date = randomDate();
    report['page_1']['date_of_election'] = dateToString(ElectionDate);
  }

  //State of Election
  if (report['page_1']['state_of_election'] == '') {
    // prettier-ignore
    report['page_1']['state_of_election'] = _.sample([
        'Alabama','Alaska','American Samoa','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','District of Columbia','Florida','Georgia','Guam','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Northern Mariana Islands','Ohio','Oklahoma','Oregon','Pennsylvania','Puerto Rico','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','U.S. Virgin Islands','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming',
    ]);
  }

  return report;
}

function fillMissingCoverageDates(report: object) {
  //Coverage From Date
  if (report['page_1']['coverage_from_date'] == '') {
    let coverageDate: Date = randomDate();

    report['page_1']['coverage_from_date'] = dateToString(coverageDate); //Generate a starting date
  }

  //Coverage Through Date
  if (report['page_1']['coverage_through_date'] == '') {
    let coverageDate: Date = new Date(report['page_1']['coverage_from_date']);
    let filingFrequencyOffset: number = 0;

    if (report['page_1']['filing_frequency'] == 'QUARTERLY') filingFrequencyOffset = 3;
    else if (report['page_1']['filing_frequency'] == 'MONTHLY') filingFrequencyOffset = 1;

    coverageDate.setMonth(coverageDate.getMonth() + filingFrequencyOffset); //Add 1 or 3 months to the date depending on Monthly/Quarterly filing

    report['page_1']['coverage_through_date'] = dateToString(coverageDate);
  }

  return report;
}

//    The keys of the objects generated by this function are deliberately not CamelCase.  They specifically mirror the FormControlName values of elements in the Front-End
export function generateReportObject(reportGiven: object = {}): object {
  let reportRandom: object = {
    page_1: {
      filing_frequency: _.sample(['MONTHLY', 'QUARTERLY']),
      report_type_category: '',
      report_code: '',
      coverage_from_date: '',
      coverage_through_date: '',
      date_of_election: '',
      state_of_election: '',
    },
    page_2: {
      address_changed: false,
      street_1: '',
      Street_2: '',
      city: '',
      state: '',
      zip: '',
    },
  };

  let report: object = { ...reportRandom, ...reportGiven };

  report = fillMissingReportCategory(report);
  report = fillMissingReportCode(report);
  report = fillMissingElectionData(report);
  report = fillMissingCoverageDates(report);

  return report;
}

export function enterReport(report, save = true) {
  cy.get('.p-menubar').find('.p-menuitem-link').contains('Reports').click();
  cy.wait(100);

  cy.get('button[label="Create a new report"]').click();
  cy.wait(100);

  cy.get("p-radiobutton[FormControlName='filing_frequency']").contains(report['page_1']['filing_frequency']).click();
  cy.wait(25);

  cy.get("p-selectbutton[FormControlName='report_type_category']")
    .contains(report['page_1']['report_type_category'])
    .click();
  cy.wait(25);

  cy.get("p-radiobutton[FormControlName='report_code']").contains(report['page_1']['report_code']).click();
  cy.wait(25);

  if (
    report['page_1']['report_type_category'] == 'Special' ||
    report['page_1']['report_code'] == '30G' ||
    report['page_1']['report_code'] == '12G'
  ) {
    cy.calendarSetValue(
      "p-calendar[FormControlName='date_of_election']",
      new Date(report['page_1']['date_of_election'])
    );
    cy.wait(25);

    cy.dropdownSetValue("p-dropdown[FormControlName='state_of_election']", report['page_1']['state_of_election']);
    cy.wait(25);
  }

  cy.calendarSetValue(
    "p-calendar[FormControlName='coverage_from_date']",
    new Date(report['page_1']['coverage_from_date'])
  );
  cy.wait(250);
  cy.calendarSetValue(
    "p-calendar[FormControlName='coverage_through_date']",
    new Date(report['page_1']['coverage_through_date'])
  );
  cy.wait(50);
  cy.wait(250);

  if (save) {
    cy.get("button[label='Save']").click();
    cy.wait(50);
  }
}

//Deletes all reports belonging to the logged-in committee
export function deleteAllReports() {
  let authToken: string = getAuthToken();
  cy.request({
    method: 'GET',
    url: 'http://localhost:8080/api/v1/f3x-summaries/',
    headers: {
      Authorization: authToken,
    },
  }).then((resp) => {
    let reports = resp.body.results;
    for (let report of reports) {
      deleteReport(report.id, authToken);
    }
  });
}

//Deletes a single report by its ID
export function deleteReport(reportID: number, authToken: string = null) {
  if (authToken == null) {
    authToken = getAuthToken();
  }

  cy.request({
    method: 'DELETE',
    url: `http://localhost:8080/api/v1/f3x-summaries/${reportID}/`,
    headers: {
      Authorization: authToken,
    },
  });
}
