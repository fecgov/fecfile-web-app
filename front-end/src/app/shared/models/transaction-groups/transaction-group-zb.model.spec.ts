import { TestBed } from '@angular/core/testing';
import { LabelUtils } from 'app/shared/utils/label.utils';
import { testTemplateMap } from 'app/shared/utils/unit-test.utils';
import { ContactTypeLabels, ContactTypes } from '../contact.model';
import { TransactionGroupZB } from './transaction-group-zb.model';

describe('TransactionGroupZB', () => {
  let component: TransactionGroupZB;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [],
      providers: [TransactionGroupZB],
    });

    component = TestBed.inject(TransactionGroupZB);
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('#getFormProperties should include last name', () => {
    const testLastName = 'testLastName';
    const testTemplateMapCopy = { ...testTemplateMap };
    testTemplateMapCopy.last_name = testLastName;
    const retval = component.getFormProperties(testTemplateMapCopy);
    expect(retval.includes(testLastName)).toBeTruthy();
  });

  it('#getChildFormProperties should include last name', () => {
    const testLastName = 'testLastName';
    const testTemplateMapCopy = { ...testTemplateMap };
    testTemplateMapCopy.last_name = testLastName;
    const retval = component.getChildFormProperties(testTemplateMapCopy);
    expect(retval.includes(testLastName)).toBeTruthy();
  });

  it('#getContactTypeOptions should return individual', () => {
    const expectedRetval = LabelUtils.getPrimeOptions(ContactTypeLabels, [
      ContactTypes.INDIVIDUAL,
      ContactTypes.ORGANIZATION,
      ContactTypes.COMMITTEE,
    ]);
    const retval = component.getContactTypeOptions();
    expect(JSON.stringify(expectedRetval) === JSON.stringify(retval)).toBeTruthy();
  });

  it('#getChildContactTypeOptions should return individual and committee', () => {
    const expectedOptions = LabelUtils.getPrimeOptions(ContactTypeLabels, [
      ContactTypes.INDIVIDUAL,
      ContactTypes.ORGANIZATION,
      ContactTypes.COMMITTEE,
    ]);
    const options = component.getChildContactTypeOptions();
    expect(JSON.stringify(expectedOptions) === JSON.stringify(options)).toBeTruthy();
  });

  it('#hasEmployerInput should return false', () => {
    const retval = component.hasEmployerInput();
    expect(retval).toBeFalse();
  });

  it('#test group methods to ensure they return the right values', () => {
    expect(component.childHasEmployerInput()).toBeFalse();
    expect(component.getParentTransactionTitle()).toBe('');
    expect(component.getParentFooter()).toBe(
      'The information in this loan will automatically create a related receipt. Review the receipt; enter a purpose of receipt or note/memo text; or continue without reviewing and “Save transactions.”'
    );
    expect(component.getGroupDescription()).toBe(
      'Saving a loan received from individual will automatically create a related receipt.'
    );
    expect(component.getParentAccordionTitle()).toBe('ENTER DATA');
    expect(component.getParentAccordionSubTitle()).toBe(
      'Enter lender, loan, and terms information for a loan received from individual'
    );
    expect(component.getChildAccordionTitle()).toBe('AUTO-POPULATED');
    expect(component.getChildAccordionSubTitle()).toBe(
      'Review information and enter purpose of description or note/memo text'
    );
    expect(component.getChildContactLabel()).toBe('Contact');
    expect(component.getAutoGeneratedChildFields(testTemplateMap).length).toBe(17);
    expect(component.getChildTransactionSubTitle()).toBe(
      'Only the Purpose of Receipt and Note/Memo Text are editable. To update any errors found, return to the previous step to update loan information.'
    );
    expect(component.hasChildCandidateInformationInput()).toBeFalse();
    expect(component.hasChildElectionInformationInput()).toBeFalse();
    expect(component.hasParentCandidateInformationInput()).toBeFalse();
    expect(component.hasParentElectionInformationInput()).toBeFalse();
  });
});
