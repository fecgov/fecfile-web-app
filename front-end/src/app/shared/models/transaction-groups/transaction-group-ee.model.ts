import { LabelUtils, PrimeOptions } from 'app/shared/utils/label.utils';
import { ContactTypeLabels, ContactTypes } from '../contact.model';
import { TransactionTemplateMapType } from '../transaction-type.model';
import { DoubleTransactionGroup } from './double-transaction-group.model';

export class TransactionGroupEE extends DoubleTransactionGroup {
  getFormProperties(templateMap: TransactionTemplateMapType): string[] {
    return [
      'entity_type',
      templateMap.organization_name,
      templateMap.street_1,
      templateMap.street_2,
      templateMap.city,
      templateMap.state,
      templateMap.zip,
      templateMap.date,
      templateMap.amount,
      templateMap.aggregate,
      templateMap.purpose_description,
      templateMap.committee_fec_id,
      templateMap.committee_name,
      templateMap.memo_code,
      templateMap.text4000,
    ].filter((val) => !!val);
  }

  getChildFormProperties(childTemplateMap: TransactionTemplateMapType): string[] {
    return [
      'entity_type',
      childTemplateMap.organization_name,
      childTemplateMap.street_1,
      childTemplateMap.street_2,
      childTemplateMap.city,
      childTemplateMap.state,
      childTemplateMap.zip,
      childTemplateMap.date,
      childTemplateMap.amount,
      childTemplateMap.aggregate,
      childTemplateMap.purpose_description,
      childTemplateMap.committee_fec_id,
      childTemplateMap.committee_name,
      childTemplateMap.memo_code,
      childTemplateMap.text4000,
      childTemplateMap.category_code,
    ].filter((field) => !!field);
  }

  hasCommitteeFecIdInput(): boolean {
    return true;
  }

  hasElectionInformationInput(): boolean {
    return false;
  }

  getContactTypeOptions(): PrimeOptions {
    return LabelUtils.getPrimeOptions(ContactTypeLabels, [ContactTypes.COMMITTEE]);
  }

  getChildContactTypeOptions(): PrimeOptions {
    return LabelUtils.getPrimeOptions(ContactTypeLabels, [ContactTypes.COMMITTEE]);
  }

  hasEmployerInput(): boolean {
    return false;
  }

  override childHasEmployerInput(): boolean {
    return false;
  }

  getParentTransactionTitle(): string {
    return '';
  }

  getParentFooter(): string {
    return 'The information in this receipt will automatically populate a related transaction. Review the associated disbursement or click "Save both transactions" to record these transactions.';
  }

  getChildTransactionSubTitle(): string {
    return 'To update any errors found, return to the previous step to update the in-kind receipt.';
  }

  getGroupDescription(): string {
    return 'This receipt type automatically creates an associated transaction. Saving an in-kind receipt will automatically create an in-kind out.';
  }

  getParentAccordionTitle(): string {
    return 'ENTER DATA';
  }

  getParentAccordionSubTitle(): string {
    return 'Add contact and receipt information';
  }

  getChildAccordionTitle(): string {
    return 'AUTO-POPULATED';
  }

  getChildAccordionSubTitle(): string {
    return 'Review disbursement information';
  }

  getChildContactLabel(): string {
    return 'Committee';
  }

  getAutoGeneratedChildFields(childTemplateMap: TransactionTemplateMapType): string[] {
    return this.getChildFormProperties(childTemplateMap).filter(
      (field) => ![childTemplateMap.text4000, childTemplateMap.category_code].includes(field)
    );
  }
}
