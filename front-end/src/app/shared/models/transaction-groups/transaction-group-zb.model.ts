import { LabelUtils, PrimeOptions } from 'app/shared/utils/label.utils';
import { ContactTypeLabels, ContactTypes } from '../contact.model';
import { TransactionTemplateMapType } from '../transaction-type.model';
import { DoubleTransactionGroup } from './double-transaction-group.model';

export class TransactionGroupZB extends DoubleTransactionGroup {
  getFormProperties(templateMap: TransactionTemplateMapType): string[] {
    return [
      'entity_type',
      templateMap.organization_name,
      templateMap.committee_fec_id,
      templateMap.last_name,
      templateMap.first_name,
      templateMap.middle_name,
      templateMap.prefix,
      templateMap.suffix,
      templateMap.street_1,
      templateMap.street_2,
      templateMap.city,
      templateMap.state,
      templateMap.zip,
      templateMap.amount,
      'loan_payment_to_date',
      templateMap.balance,
      templateMap.memo_code,
      templateMap.date,
      'loan_due_date',
      'loan_interest_rate',
      'secured',
      templateMap.text4000,
    ].filter((field) => !!field);
  }

  getChildFormProperties(childTemplateMap: TransactionTemplateMapType): string[] {
    return [
      'entity_type',
      childTemplateMap.organization_name,
      childTemplateMap.last_name,
      childTemplateMap.first_name,
      childTemplateMap.middle_name,
      childTemplateMap.prefix,
      childTemplateMap.suffix,
      childTemplateMap.street_1,
      childTemplateMap.street_2,
      childTemplateMap.city,
      childTemplateMap.state,
      childTemplateMap.zip,
      childTemplateMap.date,
      childTemplateMap.amount,
      childTemplateMap.aggregate,
      childTemplateMap.purpose_description,
      childTemplateMap.memo_code,
      childTemplateMap.text4000,
      childTemplateMap.category_code,
    ].filter((field) => !!field);
  }

  getContactTypeOptions(): PrimeOptions {
    return LabelUtils.getPrimeOptions(ContactTypeLabels, [
      ContactTypes.INDIVIDUAL,
      ContactTypes.ORGANIZATION,
      ContactTypes.COMMITTEE,
    ]);
  }

  getChildContactTypeOptions(): PrimeOptions {
    return LabelUtils.getPrimeOptions(ContactTypeLabels, [
      ContactTypes.INDIVIDUAL,
      ContactTypes.ORGANIZATION,
      ContactTypes.COMMITTEE,
    ]);
  }

  hasEmployerInput(): boolean {
    return false;
  }

  override childHasEmployerInput(): boolean {
    return false;
  }

  getParentTransactionTitle(): string {
    return '';
  }

  getParentFooter(): string {
    return 'The information in this loan will automatically create a related receipt. Review the receipt; enter a purpose of receipt or note/memo text; or continue without reviewing and “Save transactions.”';
  }

  getChildTransactionSubTitle(): string {
    return 'Only the Purpose of Receipt and Note/Memo Text are editable. To update any errors found, return to the previous step to update loan information.';
  }

  getGroupDescription(): string {
    return 'Saving a loan received from individual will automatically create a related receipt.';
  }

  getParentAccordionTitle(): string {
    return 'ENTER DATA';
  }

  getParentAccordionSubTitle(): string {
    return 'Enter lender, loan, and terms information for a loan received from individual';
  }

  getChildAccordionTitle(): string {
    return 'AUTO-POPULATED';
  }

  getChildAccordionSubTitle(): string {
    return 'Review information and enter purpose of description or note/memo text';
  }

  getChildContactLabel(): string {
    return 'Contact';
  }

  hasChildCandidateInformationInput(): boolean {
    return false;
  }

  hasChildElectionInformationInput(): boolean {
    return false;
  }

  hasParentCandidateInformationInput(): boolean {
    return false;
  }

  hasParentElectionInformationInput(): boolean {
    return false;
  }

  getAutoGeneratedChildFields(childTemplateMap: TransactionTemplateMapType): string[] {
    return this.getChildFormProperties(childTemplateMap).filter(
      (field) => ![childTemplateMap.text4000, childTemplateMap.category_code].includes(field)
    );
  }
}
