import { TestBed } from '@angular/core/testing';
import { LabelUtils } from 'app/shared/utils/label.utils';
import { testTemplateMap } from 'app/shared/utils/unit-test.utils';
import { ContactTypeLabels, ContactTypes } from '../contact.model';
import { TransactionGroupPM } from './transaction-group-pm.model';

describe('TransactionGroupPM', () => {
  let component: TransactionGroupPM;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [],
      providers: [TransactionGroupPM],
    });

    component = TestBed.inject(TransactionGroupPM);
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('#getFormProperties should include organization name', () => {
    const committeeName = 'Parent Committee';
    const testTemplateMapCopy = { ...testTemplateMap };
    testTemplateMapCopy.organization_name = committeeName;
    const formProperties = component.getFormProperties(testTemplateMapCopy);
    expect(formProperties.includes(committeeName)).toBeTruthy();
  });

  it('#getChildFormProperties should include organization name', () => {
    const committeeName = 'Child Committee';
    const testTemplateMapCopy = { ...testTemplateMap };
    testTemplateMapCopy.organization_name = committeeName;
    const formProperties = component.getChildFormProperties(testTemplateMapCopy);
    expect(formProperties.includes(committeeName)).toBeTruthy();
  });

  it('#getContactTypeOptions should return committee', () => {
    const expectedOptions = LabelUtils.getPrimeOptions(ContactTypeLabels, [ContactTypes.COMMITTEE]);
    const contactOptions = component.getContactTypeOptions();
    expect(JSON.stringify(expectedOptions) === JSON.stringify(contactOptions)).toBeTruthy();
  });

  it('#getChildContactTypeOptions should return committee', () => {
    const expectedOptions = LabelUtils.getPrimeOptions(ContactTypeLabels, [ContactTypes.COMMITTEE]);
    const contactOptions = component.getChildContactTypeOptions();
    expect(JSON.stringify(expectedOptions) === JSON.stringify(contactOptions)).toBeTruthy();
  });

  it('#hasEmployerInput should return false', () => {
    expect(component.hasEmployerInput()).toBeFalse();
  });

  it('#test group methods to ensure they return the right values', () => {
    expect(component.childHasEmployerInput()).toBeFalse();
    expect(component.getParentTransactionTitle()).toBe('PAC Conduit Earmark Receipt');
    expect(component.getParentFooter()).toBe('This type of receipt requires a conduit earmark out.');
    expect(component.getGroupDescription()).toBe(
      'This receipt type requires an associated transaction. Follow this two-step process to create both a conduit earmark receipt and a conduit earmark out:'
    );
    expect(component.getParentAccordionTitle()).toBe('STEP ONE');
    expect(component.getParentAccordionSubTitle()).toBe('Add contact and receipt information');
    expect(component.getChildAccordionTitle()).toBe('STEP TWO');
    expect(component.getChildAccordionSubTitle()).toBe(
      'Add earmarked memo and conduit information (REQUIRED FOR CONDUIT EARMARKED RECEIPTS)'
    );
    expect(component.getChildContactLabel()).toBe('Contact');
    expect(component.getAutoGeneratedChildFields(testTemplateMap).length).toBe(1);
    expect(component.getChildTransactionSubTitle()).toBe(
      'To update any errors found, return to the previous step to update the in-kind receipt.'
    );

    expect(component.hasChildCandidateInformationInput()).toBeTrue();
    expect(component.hasChildElectionInformationInput()).toBeTrue();
    expect(component.hasParentCandidateInformationInput()).toBeFalse();
    expect(component.hasParentElectionInformationInput()).toBeFalse();
  });
});
